{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "30fee6ef",
   "metadata": {},
   "source": [
    "## Sourcing & Analyzing Time Series Data- MacroEconomic Trends"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ec67f191",
   "metadata": {},
   "source": [
    "### This script contains the following:\n",
    "### 1. Importing your libraries and data\n",
    "### 2. Subsetting, wrangling, and cleaning time-series data\n",
    "### 3. Time series analysis: decomposition\n",
    "### 5. Stationarizing the IMF agencies rating data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "65f351a9",
   "metadata": {},
   "source": [
    "###  1. Importing your libraries and data"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1db7ec8e",
   "metadata": {},
   "source": [
    "### Install a new library Quandl using conda"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "id": "f3022a06",
   "metadata": {},
   "outputs": [],
   "source": [
    "## import librairies\n",
    "import quandl\n",
    "import pandas as pd\n",
    "import numpy as np\n",
    "import seaborn as sns\n",
    "import matplotlib\n",
    "import matplotlib.pyplot as plt\n",
    "from datetime import datetime\n",
    "register_matplotlib_converters()\n",
    "import statsmodels.api as sm # Using .api imports the public access version of statsmodels, which is a library that handles \\n\",\n",
    "# statistical models.\n",
    "import os\n",
    "import warnings # This is a library that handles warnings.\n",
    "\n",
    "warnings.filterwarnings(\"ignore\") # Disable deprecation warnings that could indicate, for instance, a suspended library or \n",
    "# feature. These are more relevant to developers and very seldom to analysts.\n",
    "\n",
    "plt.style.use('fivethirtyeight') # This is a styling option for how your plots will appear. More examples here:\n",
    "# https://matplotlib.org/3.2.1/tutorials/introductory/customizing.html\n",
    "# https://matplotlib.org/3.1.0/gallery/style_sheets/fivethirtyeight.html"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "id": "3ac8c0c8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Configure API key\n",
    "\n",
    "quandl.ApiConfig.api_key = 'eniwwSRsvLAqexesAxoy'"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "id": "8b80f7a7",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing the IMF Cross Country Macroeconomic stats\n",
    "\n",
    "data = quandl.get_table('QDL/ODA')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "id": "4964d757",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "datetime64[ns]\n"
     ]
    }
   ],
   "source": [
    "#  convert date or time strings to datetime objects to work efficiently in time series\n",
    "data['date'] = pd.to_datetime(data['date'])\n",
    "print(data['date'].dtypes)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "id": "2bba2b26",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "              indicator  value\n",
      "date                          \n",
      "2028-12-31  ZWE_TX_RPCH    NaN\n",
      "2027-12-31  ZWE_TX_RPCH    NaN\n",
      "2026-12-31  ZWE_TX_RPCH    NaN\n"
     ]
    }
   ],
   "source": [
    "data = data.set_index('date')\n",
    "print(data.head(3))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "id": "f4664e7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>indicator</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2028-12-31</th>\n",
       "      <td>ZWE_TX_RPCH</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2027-12-31</th>\n",
       "      <td>ZWE_TX_RPCH</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2026-12-31</th>\n",
       "      <td>ZWE_TX_RPCH</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-12-31</th>\n",
       "      <td>ZWE_TX_RPCH</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-12-31</th>\n",
       "      <td>ZWE_TX_RPCH</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              indicator  value\n",
       "date                          \n",
       "2028-12-31  ZWE_TX_RPCH    NaN\n",
       "2027-12-31  ZWE_TX_RPCH    NaN\n",
       "2026-12-31  ZWE_TX_RPCH    NaN\n",
       "2025-12-31  ZWE_TX_RPCH    NaN\n",
       "2024-12-31  ZWE_TX_RPCH    NaN"
      ]
     },
     "execution_count": 296,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "id": "4aa7f572",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(10000, 2)"
      ]
     },
     "execution_count": 297,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "id": "8e6cff74",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['indicator', 'value'], dtype='object')"
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "id": "0f88f120",
   "metadata": {},
   "outputs": [],
   "source": [
    "data = data.drop(columns = ['indicator'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "id": "4fda75d1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pandas.core.frame.DataFrame"
      ]
     },
     "execution_count": 300,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "id": "586b7a2e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "value\n",
       "NaN       3307\n",
       "0.001       52\n",
       "4.500       10\n",
       "0.048       10\n",
       "0.024        9\n",
       "          ... \n",
       "17.563       1\n",
       "22.267       1\n",
       "28.685       1\n",
       "36.356       1\n",
       "0.173        1\n",
       "Name: count, Length: 5907, dtype: int64"
      ]
     },
     "execution_count": 301,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data['value'].value_counts (dropna = False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "id": "243ec1fd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "value    3307\n",
       "dtype: int64"
      ]
     },
     "execution_count": 308,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "id": "ab9f995a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6.693000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.829265e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8.768633e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-1.974485e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.400000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.909300e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.363340e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.100028e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              value\n",
       "count  6.693000e+03\n",
       "mean   2.829265e+04\n",
       "std    8.768633e+05\n",
       "min   -1.974485e+04\n",
       "25%    1.400000e+00\n",
       "50%    1.909300e+01\n",
       "75%    3.363340e+02\n",
       "max    5.100028e+07"
      ]
     },
     "execution_count": 305,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "id": "8c38fc83",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2028-12-31</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2027-12-31</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2026-12-31</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-12-31</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-12-31</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            value\n",
       "date             \n",
       "2028-12-31    NaN\n",
       "2027-12-31    NaN\n",
       "2026-12-31    NaN\n",
       "2025-12-31    NaN\n",
       "2024-12-31    NaN"
      ]
     },
     "execution_count": 306,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "id": "a240dc00",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create subset to identify missing values in value\n",
    "data_1 = data[data['value'].isnull() == True]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "id": "4e0d5d9f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2028-12-31</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2027-12-31</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2026-12-31</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-12-31</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-12-31</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1980-12-31</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2028-12-31</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2027-12-31</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2026-12-31</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-12-31</th>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>3307 rows × 1 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "            value\n",
       "date             \n",
       "2028-12-31    NaN\n",
       "2027-12-31    NaN\n",
       "2026-12-31    NaN\n",
       "2025-12-31    NaN\n",
       "2024-12-31    NaN\n",
       "...           ...\n",
       "1980-12-31    NaN\n",
       "2028-12-31    NaN\n",
       "2027-12-31    NaN\n",
       "2026-12-31    NaN\n",
       "2025-12-31    NaN\n",
       "\n",
       "[3307 rows x 1 columns]"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 313,
   "id": "d18837aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "data.dropna(inplace = True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 317,
   "id": "c6860408",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(6693, 1)"
      ]
     },
     "execution_count": 317,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 318,
   "id": "0c8629ff",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['value'], dtype='object')"
      ]
     },
     "execution_count": 318,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 319,
   "id": "52efe908",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>date</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2028-12-31</th>\n",
       "      <td>7.149</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2027-12-31</th>\n",
       "      <td>6.479</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2026-12-31</th>\n",
       "      <td>4.575</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2025-12-31</th>\n",
       "      <td>1.936</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2024-12-31</th>\n",
       "      <td>-0.592</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            value\n",
       "date             \n",
       "2028-12-31  7.149\n",
       "2027-12-31  6.479\n",
       "2026-12-31  4.575\n",
       "2025-12-31  1.936\n",
       "2024-12-31 -0.592"
      ]
     },
     "execution_count": 319,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 320,
   "id": "68d4d28a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>6.693000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.829265e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>8.768633e+05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>-1.974485e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.400000e+00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.909300e+01</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.363340e+02</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>5.100028e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "              value\n",
       "count  6.693000e+03\n",
       "mean   2.829265e+04\n",
       "std    8.768633e+05\n",
       "min   -1.974485e+04\n",
       "25%    1.400000e+00\n",
       "50%    1.909300e+01\n",
       "75%    3.363340e+02\n",
       "max    5.100028e+07"
      ]
     },
     "execution_count": 320,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 321,
   "id": "f926c51e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "            value\n",
      "date             \n",
      "2028-12-31  7.149\n",
      "2027-12-31  6.479\n",
      "2026-12-31  4.575\n",
      "2025-12-31  1.936\n",
      "2024-12-31 -0.592\n",
      "...           ...\n",
      "2002-12-31  0.176\n",
      "2001-12-31  0.175\n",
      "2000-12-31  0.174\n",
      "1999-12-31  0.174\n",
      "1998-12-31  0.173\n",
      "\n",
      "[6693 rows x 1 columns]\n"
     ]
    }
   ],
   "source": [
    "print(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 323,
   "id": "c9044b9b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x2854af750>]"
      ]
     },
     "execution_count": 323,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(data.index, data['value'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d8f41148",
   "metadata": {},
   "source": [
    "### 2. Subsetting, wrangling, and cleaning time-series data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "1e74f1a6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create data subset based on date ranges\n",
    "data_sub = data_1.loc[(data_1['date'] >= '1980-12-31') & (data_1['date'] < '2023-12-31')]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "ad5313f2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Setting the date as the index\n",
    "from datetime import datetime\n",
    "data_sub['datetime'] = pd.to_datetime(data_sub[ 'date']) # create a datetime column from 'Date'\n",
    "data_sub = data_sub.set_index('datetime') # set the datetime as the index of the dataframe data_sub.drop(['Date'],\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "id": "a52f1179",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-12-31</th>\n",
       "      <td>2022-12-31</td>\n",
       "      <td>8.475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-31</th>\n",
       "      <td>2021-12-31</td>\n",
       "      <td>21.612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-31</th>\n",
       "      <td>2020-12-31</td>\n",
       "      <td>-26.287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-31</th>\n",
       "      <td>2019-12-31</td>\n",
       "      <td>-2.964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-31</th>\n",
       "      <td>2018-12-31</td>\n",
       "      <td>3.889</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                 date   value\n",
       "datetime                     \n",
       "2022-12-31 2022-12-31   8.475\n",
       "2021-12-31 2021-12-31  21.612\n",
       "2020-12-31 2020-12-31 -26.287\n",
       "2019-12-31 2019-12-31  -2.964\n",
       "2018-12-31 2018-12-31   3.889"
      ]
     },
     "execution_count": 86,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_sub.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "f63bad6d",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_sub_2 = data_sub.drop(columns = ['date'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "id": "20e20814",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime</th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2022-12-31</th>\n",
       "      <td>8.475</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2021-12-31</th>\n",
       "      <td>21.612</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2020-12-31</th>\n",
       "      <td>-26.287</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2019-12-31</th>\n",
       "      <td>-2.964</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2018-12-31</th>\n",
       "      <td>3.889</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             value\n",
       "datetime          \n",
       "2022-12-31   8.475\n",
       "2021-12-31  21.612\n",
       "2020-12-31 -26.287\n",
       "2019-12-31  -2.964\n",
       "2018-12-31   3.889"
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_sub_2.head(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 206,
   "id": "781271cc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>5685</td>\n",
       "      <td>5685.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2005-09-25 21:26:45.277044864</td>\n",
       "      <td>3084.016846</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1980-12-31 00:00:00</td>\n",
       "      <td>-908.600000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1996-12-31 00:00:00</td>\n",
       "      <td>1.083000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2006-12-31 00:00:00</td>\n",
       "      <td>18.237000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>2014-12-31 00:00:00</td>\n",
       "      <td>212.179000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>2022-12-31 00:00:00</td>\n",
       "      <td>814955.148000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>NaN</td>\n",
       "      <td>24221.854690</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                date          value\n",
       "count                           5685    5685.000000\n",
       "mean   2005-09-25 21:26:45.277044864    3084.016846\n",
       "min              1980-12-31 00:00:00    -908.600000\n",
       "25%              1996-12-31 00:00:00       1.083000\n",
       "50%              2006-12-31 00:00:00      18.237000\n",
       "75%              2014-12-31 00:00:00     212.179000\n",
       "max              2022-12-31 00:00:00  814955.148000\n",
       "std                              NaN   24221.854690"
      ]
     },
     "execution_count": 206,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_sub.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 207,
   "id": "55aa7570",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(5685, 2)"
      ]
     },
     "execution_count": 207,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_sub.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "id": "84b09f12",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x2814ed2d0>]"
      ]
     },
     "execution_count": 124,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Plot the new data set\n",
    "\n",
    "plt.figure(figsize=(15,5), dpi=100)\n",
    "plt.plot(data_sub_2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "id": "aba2a4e5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "value    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 125,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for missing values (you shouldn't have any)\n",
    "\n",
    "data_sub_2.isnull().sum() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 197,
   "id": "da853755",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "618"
      ]
     },
     "execution_count": 197,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check for duplicates\n",
    "\n",
    "dups = data_sub_2.duplicated()\n",
    "dups.sum()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b10c043e",
   "metadata": {},
   "source": [
    "### 3. Time-series analysis: decomposition"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 324,
   "id": "9e3ee5fa",
   "metadata": {},
   "outputs": [
    {
     "ename": "ValueError",
     "evalue": "You must specify a period or x must be a pandas object with a PeriodIndex or a DatetimeIndex with a freq not set to None",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[324], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Decompose the time series using an additive model\u001b[39;00m\n\u001b[0;32m----> 3\u001b[0m decomposition \u001b[38;5;241m=\u001b[39m sm\u001b[38;5;241m.\u001b[39mtsa\u001b[38;5;241m.\u001b[39mseasonal_decompose(data_sub_2, model\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124madditive\u001b[39m\u001b[38;5;124m'\u001b[39m)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/seasonal.py:166\u001b[0m, in \u001b[0;36mseasonal_decompose\u001b[0;34m(x, model, filt, period, two_sided, extrapolate_trend)\u001b[0m\n\u001b[1;32m    164\u001b[0m         period \u001b[38;5;241m=\u001b[39m pfreq\n\u001b[1;32m    165\u001b[0m     \u001b[38;5;28;01melse\u001b[39;00m:\n\u001b[0;32m--> 166\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    167\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mYou must specify a period or x must be a pandas object with \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    168\u001b[0m             \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124ma PeriodIndex or a DatetimeIndex with a freq not set to None\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    169\u001b[0m         )\n\u001b[1;32m    170\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m x\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m] \u001b[38;5;241m<\u001b[39m \u001b[38;5;241m2\u001b[39m \u001b[38;5;241m*\u001b[39m pfreq:\n\u001b[1;32m    171\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(\n\u001b[1;32m    172\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mx must have 2 complete cycles requires \u001b[39m\u001b[38;5;132;01m{\u001b[39;00m\u001b[38;5;241m2\u001b[39m\u001b[38;5;250m \u001b[39m\u001b[38;5;241m*\u001b[39m\u001b[38;5;250m \u001b[39mpfreq\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m \u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    173\u001b[0m         \u001b[38;5;124mf\u001b[39m\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mobservations. x only has \u001b[39m\u001b[38;5;132;01m{\u001b[39;00mx\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m]\u001b[38;5;132;01m}\u001b[39;00m\u001b[38;5;124m observation(s)\u001b[39m\u001b[38;5;124m\"\u001b[39m\n\u001b[1;32m    174\u001b[0m     )\n",
      "\u001b[0;31mValueError\u001b[0m: You must specify a period or x must be a pandas object with a PeriodIndex or a DatetimeIndex with a freq not set to None"
     ]
    }
   ],
   "source": [
    "# Decompose the time series using an additive model\n",
    "\n",
    "decomposition = sm.tsa.seasonal_decompose(data_sub_2, model='additive')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "baf790aa",
   "metadata": {},
   "outputs": [],
   "source": [
    "from pylab import rcParams # This will define a fixed size for all special charts.\n",
    "\n",
    "rcParams['figure.figsize'] = 18, 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "id": "4d6c70b0",
   "metadata": {},
   "outputs": [
    {
     "ename": "NameError",
     "evalue": "name 'decomposition' is not defined",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mNameError\u001b[0m                                 Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[136], line 3\u001b[0m\n\u001b[1;32m      1\u001b[0m \u001b[38;5;66;03m# Plot the separate components\u001b[39;00m\n\u001b[0;32m----> 3\u001b[0m decomposition\u001b[38;5;241m.\u001b[39mplot()\n\u001b[1;32m      4\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n",
      "\u001b[0;31mNameError\u001b[0m: name 'decomposition' is not defined"
     ]
    }
   ],
   "source": [
    "# Plot the separate components\n",
    "\n",
    "decomposition.plot()\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "babb9215",
   "metadata": {},
   "source": [
    "### 4. Testing for stationarity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 209,
   "id": "6b62d6a5",
   "metadata": {},
   "outputs": [
    {
     "ename": "KeyError",
     "evalue": "'Value'",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/pandas/core/indexes/base.py:3790\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3789\u001b[0m \u001b[38;5;28;01mtry\u001b[39;00m:\n\u001b[0;32m-> 3790\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_engine\u001b[38;5;241m.\u001b[39mget_loc(casted_key)\n\u001b[1;32m   3791\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m \u001b[38;5;28;01mas\u001b[39;00m err:\n",
      "File \u001b[0;32mindex.pyx:152\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mindex.pyx:181\u001b[0m, in \u001b[0;36mpandas._libs.index.IndexEngine.get_loc\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:7080\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "File \u001b[0;32mpandas/_libs/hashtable_class_helper.pxi:7088\u001b[0m, in \u001b[0;36mpandas._libs.hashtable.PyObjectHashTable.get_item\u001b[0;34m()\u001b[0m\n",
      "\u001b[0;31mKeyError\u001b[0m: 'Value'",
      "\nThe above exception was the direct cause of the following exception:\n",
      "\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[209], line 16\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[38;5;28mprint\u001b[39m (result)\n\u001b[1;32m     15\u001b[0m \u001b[38;5;66;03m# Apply the test using the function on the time series\u001b[39;00m\n\u001b[0;32m---> 16\u001b[0m dickey_fuller(data_sub_2[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mValue\u001b[39m\u001b[38;5;124m'\u001b[39m])\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/pandas/core/frame.py:3896\u001b[0m, in \u001b[0;36mDataFrame.__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3894\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mnlevels \u001b[38;5;241m>\u001b[39m \u001b[38;5;241m1\u001b[39m:\n\u001b[1;32m   3895\u001b[0m     \u001b[38;5;28;01mreturn\u001b[39;00m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_getitem_multilevel(key)\n\u001b[0;32m-> 3896\u001b[0m indexer \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39mcolumns\u001b[38;5;241m.\u001b[39mget_loc(key)\n\u001b[1;32m   3897\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m is_integer(indexer):\n\u001b[1;32m   3898\u001b[0m     indexer \u001b[38;5;241m=\u001b[39m [indexer]\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/pandas/core/indexes/base.py:3797\u001b[0m, in \u001b[0;36mIndex.get_loc\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   3792\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m \u001b[38;5;28misinstance\u001b[39m(casted_key, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;129;01mor\u001b[39;00m (\n\u001b[1;32m   3793\u001b[0m         \u001b[38;5;28misinstance\u001b[39m(casted_key, abc\u001b[38;5;241m.\u001b[39mIterable)\n\u001b[1;32m   3794\u001b[0m         \u001b[38;5;129;01mand\u001b[39;00m \u001b[38;5;28many\u001b[39m(\u001b[38;5;28misinstance\u001b[39m(x, \u001b[38;5;28mslice\u001b[39m) \u001b[38;5;28;01mfor\u001b[39;00m x \u001b[38;5;129;01min\u001b[39;00m casted_key)\n\u001b[1;32m   3795\u001b[0m     ):\n\u001b[1;32m   3796\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m InvalidIndexError(key)\n\u001b[0;32m-> 3797\u001b[0m     \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mKeyError\u001b[39;00m(key) \u001b[38;5;28;01mfrom\u001b[39;00m \u001b[38;5;21;01merr\u001b[39;00m\n\u001b[1;32m   3798\u001b[0m \u001b[38;5;28;01mexcept\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m:\n\u001b[1;32m   3799\u001b[0m     \u001b[38;5;66;03m# If we have a listlike key, _check_indexing_error will raise\u001b[39;00m\n\u001b[1;32m   3800\u001b[0m     \u001b[38;5;66;03m#  InvalidIndexError. Otherwise we fall through and re-raise\u001b[39;00m\n\u001b[1;32m   3801\u001b[0m     \u001b[38;5;66;03m#  the TypeError.\u001b[39;00m\n\u001b[1;32m   3802\u001b[0m     \u001b[38;5;28mself\u001b[39m\u001b[38;5;241m.\u001b[39m_check_indexing_error(key)\n",
      "\u001b[0;31mKeyError\u001b[0m: 'Value'"
     ]
    }
   ],
   "source": [
    "# The adfuller() function will import from the model from statsmodels for the test; however, running it will only return \n",
    "# an array of numbers. This is why you need to also define a function that prints the correct output from that array.\n",
    "\n",
    "from statsmodels.tsa.stattools import adfuller # Import the adfuller() function\n",
    "\n",
    "def dickey_fuller(timeseries): # Define the function\n",
    "    # Perform the Dickey-Fuller test:\n",
    "    print ('Dickey-Fuller Stationarity test:')\n",
    "    test = adfuller(timeseries, autolag='AIC')\n",
    "    result = pd.Series(test[0:4], index=['Test Statistic','p-value','Number of Lags Used','Number of Observations Used'])\n",
    "    for key,value in test[4].items():\n",
    "       result['Critical Value (%s)'%key] = value\n",
    "    print (result)\n",
    "\n",
    "# Apply the test using the function on the time series\n",
    "dickey_fuller(data_sub_2['Value'])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 210,
   "id": "af17ea0f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check out a plot of autocorrelations\n",
    "\n",
    "from statsmodels.graphics.tsaplots import plot_acf, plot_pacf # Here, you import the autocorrelation and partial correlation plots\n",
    "\n",
    "plot_acf(data_sub_2)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "2600952a",
   "metadata": {},
   "source": [
    "### 5. Stationarizing the Federal Reserve Economic Data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 211,
   "id": "152e01f4",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_diff = data_sub_2 - data_sub.shift(1) # The df.shift(1) function turns the observation to t-1, making the whole thing t - (t -1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 212,
   "id": "29979709",
   "metadata": {},
   "outputs": [],
   "source": [
    "data_diff.dropna(inplace = True) # Here, you remove the missing values that came about as a result of the differencing. \n",
    "# You need to remove these or you won't be able to run the Dickey-Fuller test."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 213,
   "id": "b220698c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>date</th>\n",
       "      <th>value</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>datetime</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [date, value]\n",
       "Index: []"
      ]
     },
     "execution_count": 213,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_diff.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 214,
   "id": "2477feed",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[<matplotlib.lines.Line2D at 0x2845cd2d0>,\n",
       " <matplotlib.lines.Line2D at 0x283c0e950>]"
      ]
     },
     "execution_count": 214,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAABYYAAAHACAYAAAAWWLwWAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAAA7Q0lEQVR4nO39e7yWc6I//r86SHYHEVaSkTK2cd5OQ0kqYuRQcsxxM47jMJrBOA0+7ElDmGEzstmksAvZbDROW0XMh2F/hskxo2Fi2d9MpCwdVr8/1u9eY00Lq8Na667r+Xw8elTX9b7f1/W+16tVvda1rqvFnDlzlgQAAAAAgMJo2dwnAAAAAABA01IMAwAAAAAUjGIYAAAAAKBgFMMAAAAAAAWjGAYAAAAAKBjFMAAAAABAwSiGAQAAAAAKRjEMAAAAAFAwimEAAAAAgIJRDAMAAAAAFIxiGJZBVVVV3n333VRVVTX3qdDMZIFEDqghB5TIAiWyQCIH1JADSmSBcqQYhmW0ePHi5j4FyoQskMgBNeSAElmgRBZI5IAackCJLFBuFMMAAAAAAAWjGAYAAAAAKBjFMAAAAABAwSiGAQAAAAAKRjEMAAAAAFAwimEAAAAAgIJRDAMAAAAAFIxiGAAAAACgYBTDAAAAAAAFoxgGAAAAACgYxTAAAAAAQMEohgEAAAAACkYxDAAAAABQMIphAAAAAICCUQwDAAAAABSMYhgAAAAAoGAUwwAAAAAABaMYBgAAAAAoGMUwAAAAAEDBKIYBAAAAAApGMQwAAAAAUDCKYQAAAACAglEMAwAAAAAUjGIYAAAAAKBgFMMAAAAAAAWjGAYAAAAAKBjFMAAAAABAwSiGAQAAAAAKRjEMAAAAAFAwimEAAAAAgIJRDAMAAAAAFIxiGAAAAACgYBTDAAAAAAAFoxgGAAAAACgYxTAAAAAAQMEohgEAAAAACkYxDAAAAABQMIphAAAAAICCUQwDAAAAABSMYhgAAAAAoGAUwwAAAAAABaMYBgAAAAAoGMUwAAAAAEDBKIYBAAAAAApGMQwAAAAAUDCKYQAAAACAgmm2Yvjll1/OoYcemk022SRdu3ZN//79M2HChGWao7q6OqNHj06vXr3SpUuX9OzZM8cff3xmzJjRoNf/6le/SqdOndKpU6e8+OKLy7MMAAAAAIBVTrMUw1OnTs2+++6b559/PgcddFBOOOGEzJ49OyeddFJGjRrV4HnOOeecnHfeeamurs7JJ5+cvffeO4899lj69euXN9544xtf++abb+YXv/hF2rVrt6LLAQAAAABYpbRu6gMuWrQoZ511Vlq0aJFHHnkk2223XZLk/PPPz8CBAzNixIgMHjw4PXv2/MZ5pkyZkjvvvDO77bZbHnzwway55ppJkiOPPDKDBw/O8OHD8+ijj9b72sWLF+e0007L1ltvnZ49e2b8+PErd5EAAAAAAGWsya8YnjJlSv70pz/lkEMOqS2Fk6RDhw4599xzs2jRoowbN+5b5xkzZkyS5OKLL64thZOkb9++GTBgQKZNm5Z33nmn3tdef/31ee2113LjjTemVatWK7giAAAAAIBVS5NfMfzss88mSfr377/UvtK25557rkHztGvXLrvuumu98zz55JN57rnnstlmm9XZN3369IwcOTI//elP873vfW+Zz7+qqmqZX8PqY8GCBXV+prhkgUQOqCEHlMgCJbJAIgfUkANKZIG2bds29ykspcmL4dKD4eq7VUSnTp3SuXPnb3143Lx58/LRRx9lyy23rPeK39Lcfz/PokWLcvrpp2fzzTfPOeecs1znP2vWrCxevHi5Xsvqo7KysrlPgTIhCyRyQA05oEQWKJEFEjmghhxQIgvF1KpVq/To0aO5T2MpTV4Mf/bZZ0mSjh071ru/Q4cOmTVr1grP8dVxJaNGjcprr72WJ598MmusscYynXdJ165dl+t1rB4WLFiQysrKVFRUpE2bNs19OjQjWSCRA2rIASWyQIkskMgBNeSAElmgHDV5MdxcXn311VxzzTU588wzs/322y/3POV42TdNr02bNrJAElmghhyQyAF/IwuUyAKJHFBDDiiRBcpJkz98rnSV799fzVsyd+7cr70SeFnm+Oq4JDnttNOy6aab5mc/+9kynzMAAAAAwOqkya8Y/ur9f//+yt05c+Zk9uzZ+f73v/+Nc7Rr1y5dunTJzJkzs3jx4qXuM1zffYxfe+21JElFRUW9c+69995JkrFjx2b//fdv+IIAAAAAAFYxTV4M9+7dO9dee22efvrpDB06tM6+p59+unZMQ+a5//7788ILLyw1vr55jjnmmHrnmTZtWmbMmJEf/OAHWW+99fKd73xnmdYDAAAAALCqafJiuG/fvunevXvuu+++nHLKKdl2222T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J554YpJkyZIlOf3003PPPffk7rvvztFHH/2t88yZMyfnnntuOnfunMmTJ6dbt25JkuHDh6dv374599xzM3DgwHTq1ClJUlFRkVtvvTWDBw/OGmusUTvPz3/+8wwYMCC33nprjjzyyOywww4rf9EAAAAAAGWmya4Ynjt3biZOnJju3bvnhBNOqN3eokWLXHrppWnZsmXGjBnToLkefPDBfPrppzn55JNrS+Ek6dKlS0477bR8+umnefDBB2u3b7PNNjn00EPrlMJJssEGG+Sf//mfkyTPPffcCqwOAAAAAGDV0WRXDL/44ov58ssv069fv7Ro0aLOvi5dumTLLbfMSy+9lKqqqrRt2/Yb53r22WeTJP37919qX//+/XPZZZflueeey/HHH/+t51Uqi1u1atWgdVRVVTVoHKun0r2wl+ee2KxeZIFEDqghB5TIAiWyQCIH1JADSmSBb+s7m0OTFcMzZsxIkvTo0aPe/T179sxrr72W9957L1tssUWD5urZs2e983x1zDdZvHhx7rnnnrRo0SJ77rnnt45PklmzZmXx4sUNGsvqq7KysrlPgTIhCyRyQA05oEQWKJEFEjmghhxQIgvF1KpVq6/tRJtTkxXDn332WZJk7bXXrnd/hw4d6oxryFwdO3Zcal+7du3SqlWrBs3zL//yL5k+fXqOPvrobLnllt86Pkm6du3aoHGsnhYsWJDKyspUVFSkTZs2zX06NCNZIJEDasgBJbJAiSyQyAE15IASWaAcLXMx3KNHj3zyyScNHv/www+nT58+y3qYRnfHHXfk2muvzbbbbpurrrqqwa8rx8u+aXpt2rSRBZLIAjXkgEQO+BtZoEQWSOSAGnJAiSxQTpa5GB46dGg+//zzBo+vqKhI8rerez/99NN6x82dO7fOuG9SGvPZZ59l3XXXrbNv3rx5Wbx48TfOM3bs2JxzzjnZcsst8+CDD6Z9+/bfvhAAAAAAgNXEMhfDV1999XIdqHTv33fffbfe/TNmzEjLli3TvXv3Bs31yiuvZMaMGUsVw990/+Ekueuuu3L22Wdniy22yEMPPbTU6wEAAAAAVnctm+pAO+20U9Zcc83893//d5YsWVJn30cffZTp06dnp512atDl9L17906SPP3000vtK20rjfmqu+66K2eddVY233zzPPTQQ1lvvfWWZykAAAAAAKu0JiuGO3bsmCFDhuS9997L7bffXrt9yZIlufzyy1NdXZ1jjz22zmvmz5+ft956K++//36d7UOGDEnHjh0zevTofPDBB7XbP/roo9x8881Ze+21M3jw4DqvGTNmTJ1SeP3111/5iwQAAAAAWAUs860kVsRll12WZ599Nj/96U/zzDPPZLPNNsvzzz+fF154IQMGDMiwYcPqjP/973+fAw44IL17984jjzxSu71Tp065+uqrc8opp6Rv3745+OCD07Jly0ycODEff/xxbrnllnTq1Kl2/OTJk3P22WdnyZIl6dWrV2677balzm2bbbbJ/vvv32hrBwAAAAAoF01aDHfp0iVPPvlkrrzyyjz++OP57W9/m27duuWCCy7Ij3/847Rs2fALmA8//PB07tw51157be65554kybbbbpubb745AwYMqDP2gw8+qL19xb//+7/XO9+RRx6pGAYAAAAACqFJi+Gkphy+8cYbGzS2T58+mTNnztfu32uvvbLXXnt96zxHHXVUjjrqqIaeIgAAAADAaq3J7jEMAAAAAEB5UAwDAAAAABSMYhgAAAAAoGAUwwAAAAAABaMYBgAAAAAoGMUwAAAAAEDBKIYBAAAAAApGMQwAAAAAUDCKYQAAAACAglEMAwAAAAAUjGIYAAAAAKBgFMMAAAAAAAWjGAYAAAAAKBjFMAAAAABAwSiGAQAAAAAKRjEMAAAAAFAwimEAAAAAgIJRDAMAAAAAFIxiGAAAAACgYBTDAAAAAAAFoxgGAAAAACgYxTAAAAAAQMEohgEAAAAACkYxDAAAAABQMIphAAAAAICCUQwDAAAAABSMYhgAAAAAoGAUwwAAAAAABaMYBgAAAAAoGMUwAAAAAEDBKIYBAAAAAApGMQwAAAAAUDCKYQAAAACAglEMAwAAAAAUjGIYAAAAAKBgFMMAAAAAAAWjGAYAAAAAKBjFMAAAAABAwSiGAQAAAAAKRjEMAAAAAFAwimEAAAAAgIJRDAMAAAAAFIxiGAAAAACgYBTDAAAAAAAFoxgGAAAAACgYxTAAAAAAQMEohgEAAAAACkYxDAAAAABQMIphAAAAAICCUQwDAAAAABSMYhgAAAAAoGAUwwAAAAAABaMYBgAAAAAoGMUwAAAAAEDBKIYBAAAAAApGMQwAAAAAUDCKYQAAAACAglEMAwAAAAAUTJMXw5WVlTnzzDPzj//4j6moqMiOO+6YkSNHZsGCBcs811NPPZVBgwZl4403Trdu3TJo0KA89dRTDXrtiy++mHXXXTedOnXKddddt8zHBgAAAABYVTVpMVxZWZkBAwZk7Nix2XnnnXPaaadl/fXXz4gRIzJs2LBUV1c3eK7x48dn6NCheeONN3LEEUdk2LBhefvttzN06NCMHz/+G1/7xRdf5PTTT89aa621oksCAAAAAFjlNGkxfOmll+aDDz7INddck7Fjx+ayyy7LY489liOPPDJPPvlk7r777gbNM2fOnJx77rnp3LlzJk+enKuvvjq//OUvM2XKlFRUVOTcc8/NnDlzvvb1V1xxRSorK/PjH/945SwMAAAAAGAV0mTF8Ny5czNx4sR07949J5xwQu32Fi1a5NJLL03Lli0zZsyYBs314IMP5tNPP83JJ5+cbt261W7v0qVLTjvttHz66ad58MEH633tCy+8kN/85je54oor0rVr1xVaEwAAAADAqqjJiuEXX3wxX375Zfr165cWLVrU2delS5dsueWWeemll1JVVfWtcz377LNJkv79+y+1r7TtueeeW2rf/Pnzc/rpp2f33XfPcccdtzzLAAAAAABY5bVuqgPNmDEjSdKjR4969/fs2TOvvfZa3nvvvWyxxRYNmqtnz571zvPVMV912WWXpbKyMg888MAynftXNaS4ZvVVekji8jwskdWLLJDIATXkgBJZoEQWSOSAGnJAiSzQtm3b5j6FpTRZMfzZZ58lSdZee+1693fo0KHOuIbM1bFjx6X2tWvXLq1atVpqnmeffTa33nprRowYke7duy/Lqdcxa9asLF68eLlfz+qhsrKyuU+BMiELJHJADTmgRBYokQUSOaCGHFAiC8XUqlWrr71YtjktczHco0ePfPLJJw0e//DDD6dPnz7LepiVat68eTnjjDOyyy675OSTT16hudyXuNgWLFiQysrKVFRUpE2bNs19OjQjWSCRA2rIASWyQIkskMgBNeSAElmgHC1zMTx06NB8/vnnDR5fUVGR5G9X93766af1jps7d26dcd+kNOazzz7LuuuuW2ffvHnzsnjx4jrzXHHFFfnoo48yYcKEtGy5YrdVLsfLvml6bdq0kQWSyAI15IBEDvgbWaBEFkjkgBpyQIksUE6WuRi++uqrl+tApXv/vvvuu/XunzFjRlq2bNmg2zz07Nkzr7zySmbMmLFUMVzf/YdfffXVVFVVZeedd653vssvvzyXX355Tj311Fx11VUNWQ4AAAAAwCqrye4xvNNOO2XNNdfMf//3f2fJkiVp0aJF7b6PPvoo06dPz0477dSgr5r07t079913X55++umlyt6nn366dkzJPvvsU+99PGbMmJFp06Zlhx12yFZbbZVddtlleZcHAAAAALDKaLJiuGPHjhkyZEjuvffe3H777TnxxBOTJEuWLMnll1+e6urqHHvssXVeM3/+/HzwwQdZa621svHGG9duHzJkSC699NKMHj06Rx11VLp165akpmC++eabs/baa2fw4MG1488666x6z2ncuHGZNm1aDjjggJxzzjkrecUAAAAAAOWpyYrhJLnsssvy7LPP5qc//WmeeeaZbLbZZnn++efzwgsvZMCAARk2bFid8b///e9zwAEHpHfv3nnkkUdqt3fq1ClXX311TjnllPTt2zcHH3xwWrZsmYkTJ+bjjz/OLbfckk6dOjXl0gAAAAAAVhlNWgx36dIlTz75ZK688so8/vjj+e1vf5tu3brlggsuyI9//ONlejDc4Ycfns6dO+faa6/NPffckyTZdtttc/PNN2fAgAGNtQQAAAAAgFVekxbDSU05fOONNzZobJ8+fTJnzpyv3b/XXntlr732Wu5zOeqoo3LUUUct9+sBAAAAAFZFDb9EFwAAAACA1YJiGAAAAACgYBTDAAAAAAAFoxgGAAAAACgYxTAAAAAAQMEohgEAAAAACkYxDAAAAABQMIphAAAAAICCUQwDAAAAABSMYhgAAAAAoGAUwwAAAAAABaMYBgAAAAAoGMUwAAAAAEDBKIYBAAAAAApGMQwAAAAAUDCKYQAAAACAglEMAwAAAAAUjGIYAAAAAKBgFMMAAAAAAAWjGAYAAAAAKBjFMAAAAABAwSiGAQAAAAAKRjEMAAAAAFAwimEAAAAAgIJRDAMAAAAAFIxiGAAAAACgYBTDAAAAAAAFoxgGAAAAACgYxTAAAAAAQMEohgEAAAAACkYxDAAAAABQMIphAAAAAICCUQwDAAAAABSMYhgAAAAAoGAUwwAAAAAABaMYBgAAAAAoGMUwAAAAAEDBKIYBAAAAAApGMQwAAAAAUDCKYQAAAACAglEMAwAAAAAUjGIYAAAAAKBgFMMAAAAAAAWjGIZl1KpVq+Y+BcqELJDIATXkgBJZoEQWSOSAGnJAiSxQblrMmTNnSXOfBAAAAAAATccVwwAAAAAABaMYBgAAAAAoGMUwAAAAAEDBKIYBAAAAAApGMQwAAAAAUDCKYQAAAACAglEMAwAAAAAUjGIYAAAAAKBgVqtieNasWbnpppsyZMiQbL311ll//fWz+eab55hjjslLL71U72s+++yzXHjhhdl6662zwQYbZOutt86FF16Yzz777GuPM2HChPTv3z9du3bNJptskkMPPTSvvPLK146fMWNGjj/++PTs2TNdunRJr169Mnr06FRXV6/wmqlfOWbhsccey7nnnpt99tknXbt2TadOnTJixIiVsl7qV245+OSTT3LHHXfkiCOOyHbbbZcNNtggPXr0yCGHHJKnnnpqpa2bpZVbFpYsWZJLLrkkgwYNyhZbbJGKiop897vfzcCBAzNmzJgsXLhwpa2dvym3HNTnwQcfTKdOndKpU6fcf//9y7VOvl05ZmHQoEG1H/u//zF06NCVsm7qKscclEydOjVHHnlkNttss2ywwQbZaqutctRRR+XVV19doTVTv3LLwtSpU7/280Hpx/bbb7+yls//X7nloGTKlCk59NBDs9VWW6VLly7Zfvvt88Mf/tDng0ZUrlmYMGFC9tlnn2y00Ubp2rVr+vXrl3Hjxq3weqlfY+dg/vz5ueGGG/LDH/4wO++8c9ZZZ5106tQpM2fO/MbzWtkdY4s5c+YsWa5XlqHLLrss119/fTbddNP07t0766+/fmbMmJFHHnkkS5YsyW233ZYhQ4bUjp83b1723XffvPrqq+nXr1+22267vPbaa3nyySezzTbbZNKkSWnXrl2dY4waNSpXXHFFunXrloMOOijz5s3LAw88kKqqqtx///3p06dPnfFvvPFGBg4cmC+++CJDhgzJhhtumCeeeCLTp0/Pcccdl1/96ldN8t4UTTlmYdCgQXnuuefSsWPHrLfeenn33Xdz/vnn54ILLmiS96SIyi0Ht99+e4YPH56uXbumT58+6dq1a/7yl7/k4YcfzhdffJErrrgiZ555ZpO9P0VSbllYtGhRNtpoo/zTP/1TNt9886y33nqZM2dOnnzyyfz5z3/OgAEDMmHChLRsuVp9/bbZlVsO/t7//u//Ztddd01VVVXmzZuX2267TSHYSMoxC6V/J5x//vlLnW+PHj1y+OGHN86bUWDlmIMkueaaa3LllVdmww03zMCBA9O5c+d8/PHH+d3vfpef/vSnstAIyi0LM2fOzN13313vuU6ePDkvvPBCTjzxxIwaNapx3pCCKrccJMktt9yS888/P2uvvXYOOOCArLfeennnnXcyadKktGjRIhMmTMiee+7ZFG9PoZRjFi666KL867/+ayoqKvKDH/wga6yxRh5//PHMnDkzZ5xxRq688someW+KpLFzMHPmzGy33XZJko033jiff/55/vrXv+b//b//l0022aTec2qMjnG1KoYfeuihrLfeeunVq1ed7dOmTctBBx2U9u3b54033siaa66ZJPnFL36RX/7ylzn77LNz+eWX144vbT/vvPNy4YUX1m6fMWNGvv/976d79+556qmnsvbaaydJXn/99QwYMCAVFRV58cUX07p169rX7Lfffpk2bVrGjx+fgQMHJkkWLlyYQw45JJMnT85DDz2UPfbYo9Hek6IqxyxMmzYtFRUV6dGjRx544IGceOKJiuFGVm45mDx5cqqqqrL33nvXKfzefvvtDBgwIF988UX+8Ic/ZMMNN2y096Soyi0LSVJVVZW2bdvWOZ9FixZlyJAhmTp1av7jP/4j++yzz0p/L4qsHHPwVcccc0z+53/+JwcddFBuvPFGxXAjKscslIrhOXPmNOLK+apyzMGjjz6aYcOGZdCgQfm3f/u3rLXWWnXObdGiRV/7OYTlV45Z+Dq9evXK9OnT88wzz7hqeCUrtxwsXLgwPXv2rD2Hbt261c71X//1Xzn66KPTp0+fPPzww43zhhRYuWXhlVdeSb9+/bLpppvm6aefzjrrrJOkpog84IAD8vLLL+fxxx/PLrvs0qjvS9E0dg4+//zzvPjii9l+++2zzjrrZOjQoXnqqae+sRhujI5xtboU6cADD1zqA5bU/OXZp0+f/PWvf8306dOT1Hwb71133ZX27dvnvPPOqzN++PDh6dSpU8aOHZslS/7Wm48bNy6LFi3KT37yk9o/uEnyve99L0cccUT+9Kc/ZcqUKbXb33nnnUybNi19+vSp/YAlyRprrJFLLrkkSTJmzJiVs3jqKLcslI7ds2fPtGjRYmUulW9Qbjno27dv9tlnn6WuAv3ud7+bgw8+OAsXLsz//b//d6WsnbrKLQtJliqFk6R169YZNGhQkuTdd99d/gVTr3LMQcmECRPy8MMP51e/+tVSV5Sw8pVzFmg65ZiDyy+/PB06dMhNN920VCmcRCncSMoxC/V56aWXMn369GyzzTZK4UZQbjn45JNP8tlnn2XLLbesUwonycCBA9OiRYv8f//f/7dS1k5d5ZaFRx55JEnyox/9qLYUTpJ27drlJz/5SZKa705l5WrsHLRv3z79+vWr8zH9Jo3VMa5WxfA3WWONNZIkrVq1SlLzFZoPP/ww3//+95f6D1jbtm3Tq1evzJo1q85/zJ999tkkSf/+/Zeav7Ttueeea9D4HXfcMWuvvXad8TSN5sgC5afccvD350PTKacsVFdX195vesstt1yO1bC8mjMHlZWVOe+883L00UfX+1qaVnN/Trj//vtz7bXX5je/+Y0vFjaj5sjBa6+9ljfffDN77rln2rdvnyeeeCLXX399brnlFvcSbUbN/Tnhq+66664kybHHHrscK2FFNEcONthgg3Tu3DnTp0/PrFmz6ox/4oknsmTJkm+8RRWNozmy8PHHHydJvVeRlrZNnTp1udfEslsZOVhWjdUxFuJLzu+//36eeeaZVFRUZKuttkpS80FLau7ZVp/St2zMmDGjzq/bt2+fioqKbxxf8k3HaNGiRXr06JFXXnkl8+fPzz/8wz8s7/JYBs2VBcpLueVg7ty5+c///M/avzBoOuWQhdJDKD/55JNMnjw5b731VoYNG5a+ffuuwMpYFs2dgx//+Mdp27ate8OVgebOQpKceOKJdX6/ww475Pbbb0/37t2XfUEsl+bKQemBQ+uuu2723XffvPjii3Vec9hhh+XGG29MmzZtVmR5LINy+JxQMn/+/DzwwANp27ZtDj300OVbEMuluXLQokWL/PKXv8wpp5yS3r17Z//99896662XGTNmZNKkSdl///1z8cUXr7yF8q2aKwvrrbdektT7ULLStr/85S+6pSaysnKwrBqrY1ztrxheuHBhTjnllHz55Ze5/PLLa9v80hMBv3rZ/ld16NChzrjSrzt27LhM45f1GDSe5swC5aMcczB8+PB8/PHHGT58eNZdd92GL4YVUi5ZGDlyZEaOHJlbb701b7/9ds4888z8+te/Xr5FscyaOwf33HNPHnvssYwaNSqdOnVaobWwYpo7C4MGDcp9992XN998M7NmzcrUqVNzxBFH5OWXX87gwYMzf/78FVsgDdKcOSh9S/jYsWMze/bsPPTQQ/nggw8yefLk7LLLLhk/fnz+5V/+ZQVXSEM19+eEvzdx4sTMnTs3Bx54oL8vmlBz52Do0KG577770rp169x111257rrr8tBDD6VHjx4ZNmzY187HytecWdhrr72SJDfffHOdZxHMnz8/1113XZ15aVwrMwfLqrGOsVoXw9XV1fnRj36UadOm5bjjjssRRxzR3KdEM5EFkvLMwf/5P/8nEyZMyF577VV7fygaXzllYc6cOfnkk0/yxz/+MaNGjcqYMWOy//77+4ddE2juHHz44Ye54IILMnTo0Oy3335Nemzqau4sJMnpp5+evfbaKxUVFfmHf/iHbLPNNvnNb36TQw89NO+9917GjRvX5OdUNM2dg+rq6tqf//3f/z177LFH2rdvn+222y7jxo1Lhw4dcuutt+bLL79s0vMqoubOQn3Gjh2bpOZBpTSNcsjB2LFjc9hhh+WQQw7J//zP/+TDDz/MlClT0q1btwwbNiy/+c1vmvyciqi5s9CrV68cfvjhmTFjRnbdddecc845Offcc9OrV6989NFHtSWz2xI2rubOQWNZbYvhJUuW5Kyzzsr48eNz2GGH1fkqSpLaPziffvppva+fO3dunXGlX3/df9S/bnxDjlFq9Wkc5ZAFml855uCqq67Ktddemz322CN33XWXv8ibSDlmoWXLltloo41ywgkn5Fe/+lVeeOGFjBo1quGLYpmVQw5+8pOfpFWrVvnlL3+5/AthhZVDFr7J0UcfnST53e9+16DxLJ9yyEHp1xtttFG22267OuPXX3/97Ljjjpk/f37efPPNZVkay6gcsvD33n777Tz//PPp0aNHdt9994YvhuVWDjl4++23c84552TgwIEZMWJEunfvnrXWWivbbrttxo4dm4033jhXXHFFPv/88+VfKN+qHLKQ1FwtfNVVV6Vz5865++67M378+Oywww557LHHUl1dndatW/tugkbUGDlYVo3VMa6WxXB1dXXOOOOMjB07NoccckhuvvnmtGxZd6mle3p83Y2fS/fu+Oq9P3r27JnPP/88lZWVDR7/dcdYsmRJ3n333Wy44YaePt6IyiULNK9yzMFVV12Vq666Krvvvnvuvffeep88zspXjln4e/369Uvyt4cLsPKVSw5effXVzJ49Oz179kynTp1qf4wcOTJJzb1mO3XqlJtuumkFVss3KZcsfJPOnTsniVtJNKJyycF3v/vdJF//n8bSt45WVVU1aF0su3LJwt8rPXTumGOOSYsWLZZhRSyPcsnB008/nYULF9b7gLm2bdvm+9//fubNm5e33357GVdIQ5VLFpKaC0lOPfXUPPfcc6msrMzMmTNz++23p7q6Op9//nm22mqr2geisXI1Vg6WVWN1jKtdMVxdXZ0zzzwz48aNy8EHH5xbbrml3qvwevbsmQ033DC/+93vMm/evDr7qqqqMm3atGy44YZ1burcu3fvJDWfoP9eaVtpTJLar+bWN/73v/99Pv300zrjWbnKKQs0n3LMwYgRI3LVVVeld+/eGT9+vAcENJFyzEJ9PvrooyRJ69aFeD5skyunHAwdOjTHHHPMUj+23XbbJEmfPn1yzDHHZMstt1zxhbOUcsrCN/n973+fJPnOd77TsIWxTMopBzvttFPWWmutzJw5s97y96233koiC42lnLLwVYsWLcq9996b1q1b58gjj1zu9dEw5ZSDBQsWJPnb/cf/Xmm7B1I2jnLKwjeZMGFCkpp/V7LyNWYOllVjdYyrVTFcavHHjRuXwYMHZ/To0V/7rdktWrTIMccck88//3ypb+G89tprM2fOnKW+InvUUUeldevWGTVqVJ1Lt19//fXce++92XTTTbPHHnvUbt9ss83Sq1evTJ06NY8//njt9oULF9Y+efzYY49dKWunrnLLAs2jHHPwi1/8IiNHjsxuu+2mFG5C5ZaFt956K//7v/+71LHnz5+fiy66KMnfHjLBylNuObjssstyww03LPXjBz/4QZLk+OOPzw033JA999xzJb4LJOWXhffee6/2i0Jf9eabb+aKK65I4j98jaHcctC+ffscfvjhmTdvXq655po6x7j33nvz+uuvZ7fddkuXLl1WxvL5inLLwldNmjQpH3/8cfbee28f+0ZWbjnYddddkyR33nln/vKXv9Q5xuTJkzN16tRssMEG2WKLLVZ47dRVbllI6n+g2LRp03Lddddl4403zj//8z+vyJKpR2PnYFk1VsfYYs6cOUuW+6zKzIgRIzJy5Mi0b98+p556ar0fsEGDBtVeiTNv3rzsu+++efXVV9OvX79sv/32ee211/LEE09km222yaRJk5a6BPuaa67JlVdemW7duuWggw7K/Pnzc//99+eLL77I/fffv9Qf3jfeeCMDBw5MVVVVBg8enA033DBPPvlk/vjHP+bYY4/15PlGUo5Z+K//+q888sgjSZKZM2dm2rRp2XrrrbPNNtskSXbbbTdfKFjJyi0H48aNy49+9KO0bt06p556ar3f4rH77rvX++1irJhyy8JNN92Uyy67LLvvvnu6d++ejh07ZtasWXnyySfzySefZNddd80DDzzgCwcrWbnl4NvO87bbblMGNpJyy8K4ceNy9tlnp0+fPtl0003Tvn37zJgxI48//ngWLlyY8847LxdeeGHjvikFVG45SJJPPvkkAwcOzDvvvJPevXvnn/7pnzJjxoxMmjQpa6+9diZNmqQEagTlmIWSww8/PL/97W9zzz331H7hkMZRjjk4+eSTM378+HTo0CGDBg1KRUVF3n777UyaNClJctttt2XIkCGN9I4UVzlmYciQIamqqspWW22VDh06ZPr06XniiSeyzjrrZOLEibXnwsrTFDm4+OKLM3v27CTJM888kw8//DAHHnhg7bhzzjknm2++ee34xugYV6ti+LTTTss999zzjWP+9V//NUcddVTt7z/99NOMHDkyDz30UCorK1NRUZEDDzww559/fu19vP7e+PHjc/PNN+eNN97IGmuskV122SUXXnhhdthhh3rHv/POO7niiisyderUzJs3Lz169Mjxxx+fk046aan7krBylGMWSp9Uvs6RRx6Zm2++uYErpCHKLQffloEkOf/883PBBRc0cIU0VLllYfr06bntttvy/PPPZ9asWfn888/TsWPHfO9738vQoUNz7LHHupVEIyi3HHwdxXDjK7csvPbaa7nhhhtqnzg/f/78rLvuutlxxx1z0kknpX///iu+aJZSbjko+etf/5qrrroqjzzySCorK7POOuukX79+ueCCC9K9e/flXi9fr1yz8OGHH2brrbfO+uuvnz/+8Y8eVNzIyjEH1dXVGTNmTO65555Mnz699u+HXXbZJWeeeWbtVcWsXOWYhX/7t3/L3XffnXfeeSdVVVXZaKONss8++2T48OHZYIMNVmzB1KspcrDNNtvk/fff/9r5H3744aUuHFvZHeNqVQwDAAAAAPDtXK4KAAAAAFAwimEAAAAAgIJRDAMAAAAAFIxiGAAAAACgYBTDAAAAAAAFoxgGAAAAACgYxTAAAAAAQMEohgEAAAAACkYxDAAAAABQMIphAAAAAICCUQwDAAAAABSMYhgAAAAAoGD+f6gL3/3fc+VUAAAAAElFTkSuQmCC",
      "text/plain": [
       "<Figure size 1500x500 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check out what the differencing did to the time-series curve\n",
    "\n",
    "plt.figure(figsize=(15,5), dpi=100)\n",
    "plt.plot(data_diff)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 215,
   "id": "84c3f44f",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Dickey-Fuller Stationarity test:\n"
     ]
    },
    {
     "ename": "ValueError",
     "evalue": "x is required to have ndim 1 but has ndim 2",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mValueError\u001b[0m                                Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[215], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m dickey_fuller(data_diff)\n",
      "Cell \u001b[0;32mIn[209], line 9\u001b[0m, in \u001b[0;36mdickey_fuller\u001b[0;34m(timeseries)\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21mdickey_fuller\u001b[39m(timeseries): \u001b[38;5;66;03m# Define the function\u001b[39;00m\n\u001b[1;32m      7\u001b[0m     \u001b[38;5;66;03m# Perform the Dickey-Fuller test:\u001b[39;00m\n\u001b[1;32m      8\u001b[0m     \u001b[38;5;28mprint\u001b[39m (\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mDickey-Fuller Stationarity test:\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[0;32m----> 9\u001b[0m     test \u001b[38;5;241m=\u001b[39m adfuller(timeseries, autolag\u001b[38;5;241m=\u001b[39m\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mAIC\u001b[39m\u001b[38;5;124m'\u001b[39m)\n\u001b[1;32m     10\u001b[0m     result \u001b[38;5;241m=\u001b[39m pd\u001b[38;5;241m.\u001b[39mSeries(test[\u001b[38;5;241m0\u001b[39m:\u001b[38;5;241m4\u001b[39m], index\u001b[38;5;241m=\u001b[39m[\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mTest Statistic\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mp-value\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mNumber of Lags Used\u001b[39m\u001b[38;5;124m'\u001b[39m,\u001b[38;5;124m'\u001b[39m\u001b[38;5;124mNumber of Observations Used\u001b[39m\u001b[38;5;124m'\u001b[39m])\n\u001b[1;32m     11\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m key,value \u001b[38;5;129;01min\u001b[39;00m test[\u001b[38;5;241m4\u001b[39m]\u001b[38;5;241m.\u001b[39mitems():\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/statsmodels/tsa/stattools.py:261\u001b[0m, in \u001b[0;36madfuller\u001b[0;34m(x, maxlag, regression, autolag, store, regresults)\u001b[0m\n\u001b[1;32m    166\u001b[0m \u001b[38;5;28;01mdef\u001b[39;00m \u001b[38;5;21madfuller\u001b[39m(\n\u001b[1;32m    167\u001b[0m     x,\n\u001b[1;32m    168\u001b[0m     maxlag: \u001b[38;5;28mint\u001b[39m \u001b[38;5;241m|\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m,\n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    172\u001b[0m     regresults\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mFalse\u001b[39;00m,\n\u001b[1;32m    173\u001b[0m ):\n\u001b[1;32m    174\u001b[0m \u001b[38;5;250m    \u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    175\u001b[0m \u001b[38;5;124;03m    Augmented Dickey-Fuller unit root test.\u001b[39;00m\n\u001b[1;32m    176\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    259\u001b[0m \u001b[38;5;124;03m        http://ideas.repec.org/p/qed/wpaper/1227.html\u001b[39;00m\n\u001b[1;32m    260\u001b[0m \u001b[38;5;124;03m    \"\"\"\u001b[39;00m\n\u001b[0;32m--> 261\u001b[0m     x \u001b[38;5;241m=\u001b[39m array_like(x, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mx\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    262\u001b[0m     maxlag \u001b[38;5;241m=\u001b[39m int_like(maxlag, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mmaxlag\u001b[39m\u001b[38;5;124m\"\u001b[39m, optional\u001b[38;5;241m=\u001b[39m\u001b[38;5;28;01mTrue\u001b[39;00m)\n\u001b[1;32m    263\u001b[0m     regression \u001b[38;5;241m=\u001b[39m string_like(\n\u001b[1;32m    264\u001b[0m         regression, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mregression\u001b[39m\u001b[38;5;124m\"\u001b[39m, options\u001b[38;5;241m=\u001b[39m(\u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mc\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mct\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mctt\u001b[39m\u001b[38;5;124m\"\u001b[39m, \u001b[38;5;124m\"\u001b[39m\u001b[38;5;124mn\u001b[39m\u001b[38;5;124m\"\u001b[39m)\n\u001b[1;32m    265\u001b[0m     )\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/statsmodels/tools/validation/validation.py:155\u001b[0m, in \u001b[0;36marray_like\u001b[0;34m(obj, name, dtype, ndim, maxdim, shape, order, contiguous, optional, writeable)\u001b[0m\n\u001b[1;32m    153\u001b[0m     \u001b[38;5;28;01mif\u001b[39;00m arr\u001b[38;5;241m.\u001b[39mndim \u001b[38;5;241m!=\u001b[39m ndim:\n\u001b[1;32m    154\u001b[0m         msg \u001b[38;5;241m=\u001b[39m \u001b[38;5;124m\"\u001b[39m\u001b[38;5;132;01m{0}\u001b[39;00m\u001b[38;5;124m is required to have ndim \u001b[39m\u001b[38;5;132;01m{1}\u001b[39;00m\u001b[38;5;124m but has ndim \u001b[39m\u001b[38;5;132;01m{2}\u001b[39;00m\u001b[38;5;124m\"\u001b[39m\n\u001b[0;32m--> 155\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mValueError\u001b[39;00m(msg\u001b[38;5;241m.\u001b[39mformat(name, ndim, arr\u001b[38;5;241m.\u001b[39mndim))\n\u001b[1;32m    156\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m shape \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;129;01mnot\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m    157\u001b[0m     \u001b[38;5;28;01mfor\u001b[39;00m actual, req \u001b[38;5;129;01min\u001b[39;00m \u001b[38;5;28mzip\u001b[39m(arr\u001b[38;5;241m.\u001b[39mshape, shape):\n",
      "\u001b[0;31mValueError\u001b[0m: x is required to have ndim 1 but has ndim 2"
     ]
    }
   ],
   "source": [
    "dickey_fuller(data_diff)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 216,
   "id": "4fe6846f",
   "metadata": {},
   "outputs": [
    {
     "ename": "OverflowError",
     "evalue": "cannot convert float infinity to integer",
     "output_type": "error",
     "traceback": [
      "\u001b[0;31m---------------------------------------------------------------------------\u001b[0m",
      "\u001b[0;31mOverflowError\u001b[0m                             Traceback (most recent call last)",
      "Cell \u001b[0;32mIn[216], line 1\u001b[0m\n\u001b[0;32m----> 1\u001b[0m plot_acf(data_diff)\n\u001b[1;32m      2\u001b[0m plt\u001b[38;5;241m.\u001b[39mshow()\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/pandas/util/_decorators.py:213\u001b[0m, in \u001b[0;36mdeprecate_kwarg.<locals>._deprecate_kwarg.<locals>.wrapper\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m    211\u001b[0m         \u001b[38;5;28;01mraise\u001b[39;00m \u001b[38;5;167;01mTypeError\u001b[39;00m(msg)\n\u001b[1;32m    212\u001b[0m     kwargs[new_arg_name] \u001b[38;5;241m=\u001b[39m new_arg_value\n\u001b[0;32m--> 213\u001b[0m \u001b[38;5;28;01mreturn\u001b[39;00m func(\u001b[38;5;241m*\u001b[39margs, \u001b[38;5;241m*\u001b[39m\u001b[38;5;241m*\u001b[39mkwargs)\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/statsmodels/graphics/tsaplots.py:210\u001b[0m, in \u001b[0;36mplot_acf\u001b[0;34m(x, ax, lags, alpha, use_vlines, adjusted, fft, missing, title, zero, auto_ylims, bartlett_confint, vlines_kwargs, **kwargs)\u001b[0m\n\u001b[1;32m     99\u001b[0m \u001b[38;5;250m\u001b[39m\u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    100\u001b[0m \u001b[38;5;124;03mPlot the autocorrelation function\u001b[39;00m\n\u001b[1;32m    101\u001b[0m \n\u001b[0;32m   (...)\u001b[0m\n\u001b[1;32m    206\u001b[0m \u001b[38;5;124;03m.. plot:: plots/graphics_tsa_plot_acf.py\u001b[39;00m\n\u001b[1;32m    207\u001b[0m \u001b[38;5;124;03m\"\"\"\u001b[39;00m\n\u001b[1;32m    208\u001b[0m fig, ax \u001b[38;5;241m=\u001b[39m utils\u001b[38;5;241m.\u001b[39mcreate_mpl_ax(ax)\n\u001b[0;32m--> 210\u001b[0m lags, nlags, irregular \u001b[38;5;241m=\u001b[39m _prepare_data_corr_plot(x, lags, zero)\n\u001b[1;32m    211\u001b[0m vlines_kwargs \u001b[38;5;241m=\u001b[39m {} \u001b[38;5;28;01mif\u001b[39;00m vlines_kwargs \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m \u001b[38;5;28;01melse\u001b[39;00m vlines_kwargs\n\u001b[1;32m    213\u001b[0m confint \u001b[38;5;241m=\u001b[39m \u001b[38;5;28;01mNone\u001b[39;00m\n",
      "File \u001b[0;32m~/anaconda3/lib/python3.11/site-packages/statsmodels/graphics/tsaplots.py:19\u001b[0m, in \u001b[0;36m_prepare_data_corr_plot\u001b[0;34m(x, lags, zero)\u001b[0m\n\u001b[1;32m     16\u001b[0m \u001b[38;5;28;01mif\u001b[39;00m lags \u001b[38;5;129;01mis\u001b[39;00m \u001b[38;5;28;01mNone\u001b[39;00m:\n\u001b[1;32m     17\u001b[0m     \u001b[38;5;66;03m# GH 4663 - use a sensible default value\u001b[39;00m\n\u001b[1;32m     18\u001b[0m     nobs \u001b[38;5;241m=\u001b[39m x\u001b[38;5;241m.\u001b[39mshape[\u001b[38;5;241m0\u001b[39m]\n\u001b[0;32m---> 19\u001b[0m     lim \u001b[38;5;241m=\u001b[39m \u001b[38;5;28mmin\u001b[39m(\u001b[38;5;28mint\u001b[39m(np\u001b[38;5;241m.\u001b[39mceil(\u001b[38;5;241m10\u001b[39m \u001b[38;5;241m*\u001b[39m np\u001b[38;5;241m.\u001b[39mlog10(nobs))), nobs \u001b[38;5;241m-\u001b[39m \u001b[38;5;241m1\u001b[39m)\n\u001b[1;32m     20\u001b[0m     lags \u001b[38;5;241m=\u001b[39m np\u001b[38;5;241m.\u001b[39marange(\u001b[38;5;129;01mnot\u001b[39;00m zero, lim \u001b[38;5;241m+\u001b[39m \u001b[38;5;241m1\u001b[39m)\n\u001b[1;32m     21\u001b[0m \u001b[38;5;28;01melif\u001b[39;00m np\u001b[38;5;241m.\u001b[39misscalar(lags):\n",
      "\u001b[0;31mOverflowError\u001b[0m: cannot convert float infinity to integer"
     ]
    },
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 1800x700 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot_acf(data_diff)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "5be897ca",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
